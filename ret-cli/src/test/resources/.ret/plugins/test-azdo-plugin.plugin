{"libName":"azure-devops-plugin.dylib","commands":[{"name":"azure-devops","arguments":[],"options":[],"subcommands":[{"name":"pr","arguments":[],"options":[],"subcommands":[{"name":"create","arguments":[{"name":"<branch>","position":0,"completionCandidates":["function:_autocomplete_branch"]}],"options":[{"names":["--ignore-context-aware","-ica"],"type":"boolean","completionCandidates":[]},{"names":["--no-prompt"],"type":"boolean","completionCandidates":[]},{"names":["--repository","-r"],"type":"java.lang.String","completionCandidates":["function:_autocomplete_repository_flag"]}],"subcommands":[],"description":"Create a pull request in Azure DevOps"},{"name":"open","arguments":[{"name":"<pullRequestId>","position":0,"completionCandidates":["function:_autocomplete_pullrequest"]}],"options":[{"names":["--ignore-context-aware","-ica"],"type":"boolean","completionCandidates":[]},{"names":["--repository","-r"],"type":"java.lang.String","completionCandidates":["function:_autocomplete_repository_flag"]}],"subcommands":[],"description":"Navigate to a pull request in Azure DevOps"}],"description":"Interact with Azure DevOps pull requests"},{"name":"pipeline","arguments":[],"options":[],"subcommands":[{"name":"open","arguments":[{"name":"<pipeline_id>","position":0,"completionCandidates":["function:_autocomplete_pipeline"]},{"name":"<pipeline_run_id>","position":0,"completionCandidates":["function:_autocomplete_pipeline_run"]}],"options":[],"subcommands":[],"description":"Open the pipeline dashboard, or a specific pipeline or run"}],"description":"Open a recent pipeline run"},{"name":"repository","arguments":[],"options":[{"names":["--ignore-context-aware","-ica"],"type":"boolean","completionCandidates":[]}],"subcommands":[{"name":"open","arguments":[{"name":"<repository>","position":0,"completionCandidates":["function:_autocomplete_repository"]}],"options":[{"names":["--ignore-context-aware","-ica"],"type":"boolean","completionCandidates":[]}],"subcommands":[],"description":""}],"description":"List all repositories"},{"name":"autocomplete","arguments":[],"options":[{"names":["--ignore-context-aware","-ica"],"type":"boolean","completionCandidates":[]}],"subcommands":[{"name":"azdo-branch","arguments":[],"options":[{"names":["--word","-w"],"type":"java.lang.String","completionCandidates":[]},{"names":["--repository","-r"],"type":"java.lang.String","completionCandidates":[]},{"names":["--ignore-context-aware","-ica"],"type":"boolean","completionCandidates":[]}],"subcommands":[],"description":""},{"name":"azdo-pipeline-run","arguments":[],"options":[{"names":["--word","-w"],"type":"java.lang.String","completionCandidates":[]},{"names":["--pipeline-id"],"type":"java.lang.String","completionCandidates":[]},{"names":["--ignore-context-aware","-ica"],"type":"boolean","completionCandidates":[]}],"subcommands":[],"description":""},{"name":"azdo-pipeline","arguments":[],"options":[{"names":["--word","-w"],"type":"java.lang.String","completionCandidates":[]},{"names":["--ignore-context-aware","-ica"],"type":"boolean","completionCandidates":[]}],"subcommands":[],"description":""},{"name":"azdo-pullrequest","arguments":[],"options":[{"names":["-n","--not-reviewed"],"type":"boolean","completionCandidates":[]},{"names":["--word","-w"],"type":"java.lang.String","completionCandidates":[]},{"names":["--repository","-r"],"type":"java.lang.String","completionCandidates":[]},{"names":["--ignore-context-aware","-ica"],"type":"boolean","completionCandidates":[]}],"subcommands":[],"description":""},{"name":"azdo-repository","arguments":[],"options":[{"names":["--word","-w"],"type":"java.lang.String","completionCandidates":[]},{"names":["--ignore-context-aware","-ica"],"type":"boolean","completionCandidates":[]}],"subcommands":[],"description":""}],"description":""}],"description":"Plugin to interact with Azure DevOps"}],"customZshAutocompletion":"function _autocomplete_branch() {\n    local word=${words[$CURRENT]}\n    if _matches_flag_syntax \"$word\"; then return; fi\n    _contains_any_flag '-ica' '--ignore-context-aware' && local ignore_context_aware_flag='-ica'\n    local repository_flag_value=${RET_COMBINED_OPT_ARGS[-r]-${RET_COMBINED_OPT_ARGS[--repository]}}\n    desc=(\"${(@f)$(RET_ENV=ZSH_AUTOCOMPLETE ret azure-devops autocomplete azdo-branch --word=\"$word\" --repository=\"${repository_flag_value}\" ${ignore_context_aware_flag})}\")\n    vals=( ${desc%%:*} )\n    compadd -d desc -aQU vals\n    compstate[insert]=menu # no expand\n}\n\nfunction _autocomplete_repository() {\n    local word=${words[$CURRENT]}\n    if _matches_flag_syntax \"$word\"; then return; fi\n    desc=(\"${(@f)$(RET_ENV=ZSH_AUTOCOMPLETE ret azure-devops autocomplete azdo-repository --word=\"$word\")}\")\n    vals=( ${desc%%:*} )\n    compadd -d desc -aQU vals\n    compstate[insert]=menu # no expand\n}\n\nfunction _autocomplete_repository_flag() {\n    local word=${words[$CURRENT]}\n    local flag_value=${RET_COMBINED_OPT_ARGS[-r]-${RET_COMBINED_OPT_ARGS[--repository]}}\n\n    # Get the possible prefix for the values. For example \"-r=\" or \"\" when -r is followed by a space rather than \"=\"\n    local flag_word_prefix=$([[ $word =~ ^.*= ]] && echo -n \"$MATCH\")\n    # Get the value from the option -r or else --repository\n    local repository_flag_value=$flag_value\n    desc=(\"${(@f)$(RET_ENV=ZSH_AUTOCOMPLETE ret azure-devops autocomplete azdo-repository --word=\"${repository_flag_value}\")}\")\n    vals=( ${desc%%:*} )\n    compadd -p \"$flag_word_prefix\" -d desc -aQU vals\n    compstate[insert]=menu # no expand\n}\n\nfunction _autocomplete_pipeline() {\n    local word=${(Q)words[$CURRENT]} # (Q) unescapes things like \\(, \\) etc\n    if _matches_flag_syntax \"$word\"; then return; fi\n    desc=(\"${(@f)$(RET_ENV=ZSH_AUTOCOMPLETE ret azure-devops autocomplete azdo-pipeline --word=\"${word}\")}\")\n    vals=( ${desc%%:*} )\n    compadd -V \"no-sort-group\" -d desc -aU vals # not sure why \"-o nosort\" does not work and why -V is...\n    compstate[list_max]=\"300\"\n    compstate[insert]=menu\n}\n\nfunction _autocomplete_pipeline_run() {\n    local word=${words[$CURRENT]}\n    local pipeline_id=${(Q)words[$CURRENT-1]} # (Q) unescapes things like \\(, \\) etc\n    if _matches_flag_syntax \"$word\"; then return; fi\n    desc=(\"${(@f)$(RET_ENV=ZSH_AUTOCOMPLETE ret azure-devops autocomplete azdo-pipeline-run --pipeline-id=\"${pipeline_id}\" --word=\"$word\")}\")\n    vals=( ${desc%%:*} )\n    compadd -V \"no-sort-group\" -d desc -aQU vals # not sure why \"-o nosort\" does not work and why -V is...\n    compstate[insert]=menu # no expand\n}\n\nfunction _autocomplete_pullrequest() {\n    local word=${words[$CURRENT]}\n    if _matches_flag_syntax \"$word\"; then return; fi\n    _contains_any_flag '-ica' '--ignore-context-aware' && local ignore_context_aware_flag='-ica'\n    local repository_flag_value=${RET_COMBINED_OPT_ARGS[-r]-${RET_COMBINED_OPT_ARGS[--repository]}}\n    candidates=(\"${(@f)$(RET_ENV=ZSH_AUTOCOMPLETE ret azure-devops autocomplete azdo-pullrequest --word=\"$word\" --repository=\"${repository_flag_value}\" ${ignore_context_aware_flag})}\")\n    desc=( ${candidates#*:} )\n    vals=( ${candidates%%:*} )\n    compadd -d desc -aQU vals\n    compstate[insert]=menu # no expand\n}\n\n"}
